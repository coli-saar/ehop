# This script removes duplicate edges from all graph coloring instances in a given directory.
# This can be used when running a solver from this repository on instances that were generated by or copied from other sources.

import os
import sys
from pathlib import Path

sys.path.insert(1, "../ehop")

from problems.graph_coloring.model import GraphColoringLoader


def count_edges(path: str) -> int:
    """
    Counts the number of edges in a graph coloring problem file.
    """
    num_edges = 0
    with open(path, "r") as file:
        for line in file:
            if line.startswith("e"):
                num_edges += 1
    return num_edges


def extract_header(path: str) -> str:
    """
    Gets the comment header from a graph coloring problem file.
    """
    with open(path, "r") as file:
        header = ""
        for line in file:
            if line.startswith("c"):
                header += line
            else:
                break
        return header


def main(path: str) -> None:
    """
    Dedupes the edges of all graph coloring instances in a given directory,
    updating the header(s) to indicate that the file has been modified.
    """
    loader = GraphColoringLoader()

    update_message = "c NOTE: This file has been modified to remove duplicate edges.\n"

    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith(".col"):
                problem_path = os.path.join(root, file)
                print(f"Processing {problem_path}...", end=" ")
                inst = loader.load(problem_path)
                if inst.graph.number_of_edges() != count_edges(problem_path):
                    new_header = extract_header(problem_path) + update_message
                    loader.store(inst, Path(problem_path), header=new_header)
                    print("Duplicate edges removed and header updated.")
                else:
                    print("No duplicate edges found.")


if __name__ == "__main__":
    main(sys.argv[1])
